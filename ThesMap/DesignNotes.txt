Let us keep straight track of various interpretations.

1. From a phrase, we generate a set of normalized phrases.
We choose not to cache these because there will be very many
such phrases to try.
This means that we do not save any time running norm over 
many phrases in the input.  This decision might be revisited.

2. From a normalized phrase, we look up in the UMLS a set of
interpretations of that normalized phrase.  We do cache these,
including caching the fact that there was no interpretation.
Each interpretation is a 4-tuple of <cui, str, tui, sty>,
and what we cache is the collection of these (an ArrayList),
or a designated null list that means no interpretation exists
for this normalized phrase.
The 4-tuples are each an Interpretation, and a set of them is
an InterpretationSet.  A singleton nullInterpretation is the marker
that there is no interpretation.  The singleton nullInterpretationSet
shows that there is no set of interpretations for a normalized
phrase.  

3. For an instance of an unnormalized phrase occurring in the text,
we merge the set of interpretations from all of the normalized phrases,
and create an annotation from this set.  The annotation is also 
marked by its starting and ending character positions.
The merged set is an InterpretationSet.
An Annotation holds an InterpretationSet and the begin and end 
character positions of the original phrase.

4. We maintain a tree of all the annotations on a text, indexed
by each of the starting positions of all of its words.  Each annotation 
is thus easily available for retrieval when the mouse hovers over a 
specific word. 
An AnnotationTree holds this indexed set.  Each tree value is an 
ArrayList of Annotations. 

_______
1. We can have multiple Guis open at the same time, each with its own
text and annotations, which it "owns".  Each Gui contains a display of
the text, a detail area that displays annotations on what the mouse is 
over, and a Tree that permits selection of the TUIs that are to be
highlighted.

2. See http://stackoverflow.com/questions/5674128/jtextpane-highlight-text
for hints on highlighting.

________
Next try:

To support different annotators, we create a class of ResourceConnections, of
which there are three contemplated types at present:
1. connections to the UMLS database and the norm program, to support phrase 
matching in the Metathesaurus.
2. connections to MetaMap
3. connections to cTakes; this is one I have not yet figured out.

My idea is to create a pool (of typically one member) of each of these,
which are then doled out to UmlsWindow or UmlsDocument instances to perform
the requested analyses.  It is unclear whether it is better to create
multiple ResourceConnectors of the same type for these instances, or whether to 
use just one of each for the whole bunch.  The answer only matters for batch use,
and will depend on where the bottlenecks are.  If the limiting step is 
communication bandwidth, then a shared one will do.  If we can achieve server
parallelism (in the MetaMap, cTakes and Mysql servers), then multiple ones
may be advantageous.  However, local caching of results argues for a single 
connector if the cache is within the connector instance, but perhaps for
multiple ones if we assume that all connectors of a single type are interchangeable,
so their results can be cached jointly at the connector class level.

There are Annotator types corresponding to each of the connector types, 
instances of which can perform annotations of that type on a single document. The
above discussion about connector multiplicity is all about whether those annotator
instances each share one connector or each gets its own.  Perhaps this can be a
high-level switch, to support experimentation.  Within each Annotator there is also 
a worker class that can be fired by pushing the Annotate button in the interactive 
version of the program, so that the annotation (which can take a long time) does
not run on the interactive thread.

In the interactive mode, each UmlsWindow can have multiple AnnotationSets, each
corresponding to one annotator type. 

__________________
Dec 14, 2013

A new whack at building a generic JFrame subclass in which management of the 
Window menu is mainly automated. --Done

Jan 3, 2014

Think through Annotator class.  Each extends SwingWorker, and they cannot be re-used.
We registerType each of the annotation types, so we can then create an Annotator any
time we want to annotate the content of a UmlsWindow.

This is all getting too meta and baroque.  We should just have a method in UmlsWindow
that creates annotators for each type of annotation that has been registered, listing
all of the possibilities rather than trying to do it all data-driven.

__________________
Jan 15, 2014
This is the current hierarchy of annotations:

1. AnnotationSet holds an indexed tree of Annotations (by start and end). It is Iterable, 
and supports integrate, hittingSet, getAnnotationBreaks, and typeBits operations.
It should also cache typeBits, which is moderately expensive to compute.
We don't need to remove Annotations because at present the only way they can change is
if we change the ResourceConnectors that provide the data sources to create them or if
we change the content of the text being analyzed.  The first is not possible, and if
the second occurs, we drop the existing AnnotationSet and create a new one in any case.

2. Annotation contains a start, end, the analyzed text (just for ease of debuggin), and 
an InterpretationSet.  Supported operations are add, matchesTui (bool), matchingTui (a
new Annotation holding only the matching Tuis), and typeBits.  We need a more general
selection mechanism that selects not only by Tuis but also by annotation types.

3. InterpretationSet is just a collection of Interpretations. The nullInterpretationSet
is a singleton representing no interpretations.  Supports add, remove, contains, matchesTui,
matchingTui, and typeBits.

4. Interpretation just records a type, cui, tui, str and sty, the latter two redundant with
cui and tui.

What we need is a filter not only on tui, such as matchingTui, but also on type, at the same
time.
 
Jan 27, 2014

Need to resolve an issue with numbering of annotation types.  The right answer is that
on startup we do determine what annotations we can make by seeing what ResourceConnectors 
are available.  Then the order we determine there should provide both the ordering for 
typeBits for annotations and for the methodChoice panel in UmlsWindow.  This should be easy to
arrange, but needs some refactoring of code.

____________
May 8, 2015

Design of result storage.  Possible ways to store annotation results:
1. DB
2. XML file
3. CSV file

Simple annotations need just the following:
a. Document (either a file name or a database + id)
b. start position of text being annotated
c. end position of text being annotated (assumes contiguous span)
d. CUI
e. TUI
f. negation or certainty/attribution status (computed by some annotators)
g. set of annotators (as number encoding of bit string)

Unique annotations share columns a-e.  We may choose to create a unique ID to
represent each such unique combination, to simplify inter-annotation relations.
h. ID

For convenience, we might also store the following, though this can always be recovered
i. the actual text covered by the span [start, end)
j. preferred name of the CUI
k. name of the TUI

To support more complex annotations that involve relations among entities, we also need to
store (relation, target-annotation).  In a relational DB, this should happen in another table
that holds
a. relation
b. id of source annotation (argues for use of ID column)
c. id of target annotation

The .csv version of these data should be in the same structure as the DB version.
An XML version can represent the inter-annotation relations within the representation
of the source annotations. 