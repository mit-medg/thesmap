package gov.nih.nlm.nls.lvg.Flows;
import java.util.*;
import java.sql.*;
import gov.nih.nlm.nls.lvg.Lib.*;
import gov.nih.nlm.nls.lvg.Util.*;
import gov.nih.nlm.nls.lvg.Db.*;
import gov.nih.nlm.nls.lvg.Trie.*;
/*****************************************************************************
* This class gets uninflected variants of all words of a specified term and 
* returns every combination of uninflected words.  The uninflected variants
* are generated by Lvg facts or rules.  A heuristic rule is applied
* when more than ten output combinations is generated by the rules.  In such
* case, the original term is used to replace all output combinations.
*
* <p><b>History:</b>
* <ul>
* </ul>
*
* @author NLM NLS Development Team
*
* @see <a href="../../../../../../../designDoc/UDF/flow/uninflectWords.html">
* Design Document </a>
*
* @version    V-2013
****************************************************************************/
public class ToUninflectWords extends Transformation
{
    // public methods
    /**
    * Performs the mutation of this flow component.
    *
    * @param   in   a LexItem as the input for this flow component
    * @param   conn   LVG database connection
    * @param   trie   LVG Ram trie
    * @param   detailsFlag   a boolean flag for processing details information
    * @param   mutateFlag   a boolean flag for processing mutate information
    *
    * @return  the results from this flow component - a collection (Vector) 
    * of LexItems
    *
    * @exception SQLException if errors occurr while connect to LVG database.
    *
    * @see DbBase
    */
    public static Vector<LexItem> Mutate(LexItem in, int maxTerm, 
        Connection conn, 
        RamTrie trie, boolean detailsFlag, boolean mutateFlag) 
        throws SQLException
    {
        // mutate the term
        Vector<String> termList = 
            UninflectWords(in.GetSourceTerm(), conn, trie, maxTerm);
        // update target LexItem
        Vector<LexItem> out = new Vector<LexItem>();
        for(int i = 0; i < termList.size(); i++)
        {
            String term = termList.elementAt(i);
            // details & mutate
            String details = null;
            String mutate = null;
            if(detailsFlag == true)
            {
                details = INFO;
            }
            if(mutateFlag == true)
            {
                mutate = Transformation.NO_MUTATE_INFO;
            }
            LexItem temp = UpdateLexItem(in, term, Flow.UNINFLECT_WORDS, 
                Category.ALL_BIT_VALUE, 
                Inflection.GetBitValue(Inflection.BASE_BIT),
                details, mutate);
            out.addElement(temp);
        }
        return out;
    }
    /**
    * A unit test driver for this flow component.
    */
    public static void main(String[] args)
    {
        // load config file
        Configuration conf = new Configuration("data.config.lvg", true);
        String testStr = GetTestStr(args, "Left Data");
        int minTermLen = Integer.parseInt(
            conf.GetConfiguration(Configuration.MIN_TERM_LENGTH));
        String lvgDir = conf.GetConfiguration(Configuration.LVG_DIR);
        int maxTerm = Integer.parseInt(conf.GetConfiguration(
            Configuration.MAX_UNINFLS));
        // Mutate: connect to DB
        LexItem in = new LexItem(testStr);
        Vector<LexItem> outs = new Vector<LexItem>();
        try
        {
            Connection conn = DbBase.OpenConnection(conf);
            boolean isInflection = true;
            RamTrie trie = new RamTrie(isInflection, minTermLen, lvgDir, 0);
            if(conn != null)
            {
                outs = ToUninflectWords.Mutate(in, maxTerm, conn, trie, true, 
                    true);
            }
            DbBase.CloseConnection(conn, conf);
        }
        catch (Exception e)
        {
            System.err.println(e.getMessage());
        }
        PrintResults(in, outs);     // print out results
    }
    // protected method
    /**
    * Form the ouptut from a specified Vector.   
    * The input Vector<Vector<String>> inList. 
    * In this flow (Uninflect Words), these 
    * elements are the uninflected terms for each word of the input term.
    * This method is generic and can be used to form permutation in a 
    * multi-words term.
    *
    * @param   inList Vector<Vector<String>> - uninflected term for each word 
    *          in a term.
    *
    * @return  Vector<String> - all permutation results from input.
    */
    protected static Vector<String> FormCombinations(
        Vector<Vector<String>> inList)
    {
        Vector<String> out = new Vector<String>();
        // go through all elements of uninflected terms of all elements 
        for(int i = 0; i < inList.size(); i++)
        {
            int index = inList.size()-1-i;    // add the end first, look nicer
            Vector<String> curList = inList.elementAt(index);  // last Vector
            int curSize = curList.size();
            if(i == 0)
            {
                out.addAll(curList); // if first time word, copy curList to out
            }
            else        // not the first time word
            {
                // copy current set to itself for j-1 times.
                Vector<String> temp = new Vector<String>(out);
                int tempSize = temp.size();
                for(int j = 1; j < curSize; j++)
                {
                    out.addAll(temp);
                }
                // update elements by adding new String
                for(int j = 0; j < out.size(); j++)
                {
                    String curStr = null;
                    if(curSize > 0)
                    {
                        // add word from curList
                        curStr = curList.elementAt(j/tempSize);
                    }
                    StringBuffer buffer = new StringBuffer();
                    buffer.append(curStr);
                    buffer.append(" ");
                    buffer.append(out.elementAt(j));
                    String newStr = buffer.toString();
                    out.setElementAt(newStr, j);
                }
            }
        }
        return out;
    }
    // private methods
    /**
    * Get uninflected variants of each word of a specified term and return
    * all combinations of these uninflected variants.
    *
    * @param   inStr   a input term for finding it's uninflection
    * @param   conn   LVG database connection
    * @param   trie   LVG Ram trie
    *
    * @return  the results from this flow component - a collection (Vector) 
    * of Strings
    *
    * @see DbBase
    */
    private static Vector<String> UninflectWords(String inStr, Connection conn,
        RamTrie trie, int maxTerm)
    {
        // tokenize wrods form the input term
        String delim = " \t-({[)}]_!@#%&*\\:;'\",.?/~+=|<>$`^";
        StringTokenizer buf = new StringTokenizer(inStr, delim);
        Vector<String> out = new Vector<String>();
        Vector<Vector<String>> strList = new Vector<Vector<String>>();  // unInflected terms 
        // Each element is a Vector, contains all uninflected terms for a wrod 
        long totalNum = 1;        // total number of pumutations
        // get uninflections for all wrods
        while(buf.hasMoreTokens() == true)
        {
            String curStr = buf.nextToken();
            try
            {
                // Fact: get uninflections from database
                Vector<InflectionRecord> factList 
                    = DbUninflection.GetUninflections(curStr, conn);
                Vector<String> wordList = new Vector<String>();
                for(int i = 0; i < factList.size(); i++)
                {
                    InflectionRecord record = factList.elementAt(i);
                    String uninflectedTerm = record.GetUninflectedTerm();
                    // lower case the uninflected term
                    String uninflectedTermLc = uninflectedTerm.toLowerCase();
                    if(wordList.contains(uninflectedTermLc) == false)
                    {
                        wordList.addElement(uninflectedTermLc);
                    }
                }
                // apply Trie rules if no results from fact
                if(factList.size() == 0)
                {
                    Vector<RuleResult> ruleList 
                        = trie.GetUninflectedTermsByRules(curStr,
                        Category.ALL_BIT_VALUE, Inflection.ALL_BIT_VALUE, true);
                    // form the list from the result of Trie
                    for(int i = 0; i < ruleList.size(); i++)
                    {
                        RuleResult result = ruleList.elementAt(i);
                        String uninflectedTerm = result.GetOutTerm();
                        // lower case the uninflected term
                        String uninflectedTermLc = 
                            uninflectedTerm.toLowerCase();
                        // check if the uninflected term exist in list and DB
                        if((wordList.contains(uninflectedTermLc) == false)
                        && (DbInflection.IsExistInflectedTerm(
                            uninflectedTerm, conn) == false))
                        {
                            wordList.addElement(uninflectedTermLc);
                        }
                    }
                }
                // check total permutation number with output limit
                // apply heuristic rules: use original term if size is too big
                totalNum = totalNum*wordList.size();
                if(totalNum > maxTerm)
                {
                    out.removeAllElements();
                    out.addElement(inStr);
                    return out;
                }
                strList.addElement(wordList);        // add wordList if legal
            }
            catch (Exception e)
            {
                break;
            }
        }
        // do the permutation & sorting
        out = FormCombinations(strList); // form the String
        // re-sort by Dictionary order
        if(strList.size() >= 1)
        {
            LvgComparator<String> lc = new LvgComparator<String>();
            lc.SetLengthFlag(true);       // needed for luiNorm
            lc.SetCase(false);
            Collections.sort(out, lc);    // sort output in dictionary order
        }
        return out;
    }
    // data members
    private static final String INFO = "Uninflect Words";
}
