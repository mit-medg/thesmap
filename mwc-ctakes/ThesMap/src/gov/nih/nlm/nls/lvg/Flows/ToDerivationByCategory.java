package gov.nih.nlm.nls.lvg.Flows;
import java.util.*;
import java.sql.*;
import gov.nih.nlm.nls.lvg.Lib.*;
import gov.nih.nlm.nls.lvg.Db.*;
import gov.nih.nlm.nls.lvg.Trie.*;
/*****************************************************************************
* This class provides features of generating derivational variants for 
* specified categories.  This class utilize classes of ToDerivation and
* OutputFilter.
*
* <p> Derivational variants are terms which are somehow related to the original 
* term but do not share the same meaning.  Often, the derivational variant 
* changes syntactic category from the original term.  Derivational variants 
* are pre-computed and are put in Derivation table in Lvg database (facts).
* Derivations can also be generated by derivation rules through Lvg trie.
*
* <p><b>History:</b>
* <ul>
* <li>SCR-15, chlu, 07-23-12, add derivation type options.
* <li>SCR-20, chlu, 07-23-12, add derivation negation options.
* </ul>
*
* @author NLM NLS Development Team
*
* @see 
* <a href="../../../../../../../designDoc/UDF/flow/derivationByCategory.html">
* Design Document </a>
*
* @version    V-2013
****************************************************************************/
public class ToDerivationByCategory extends Transformation implements Cloneable
{
    // public methods
    /**
    * Performs the mutation of this flow component.
    *
    * @param   in   a LexItem as the input for this flow component
    * @param   conn   LVG database connection
    * @param   trie   LVG Ram trie
    * @param   restrictFlag   a numberical flag to restrict out into LVG_ONLY
    * LVG_OR_ALL, or ALL (defined in OutputFilter).
    * @param   derivationType   a numberical flag to restrict derivation type
    * D_TYPE_ZERO, D_TYPE_PREFIX, D_TYPE_SUFFIX, D_TYPE_ZERO_PREFIX,
    * D_TYPE_ZERO_SUFFIX, D_TYPE_PREFIX_SUFFIX, D_TYPE_ALL (defined in 
    * OutputFilter);
    * @param   derivationNegation   a numberical flag to restrict derivation 
    * negation D_NEGATION_OTHERWISE, D_NEGATION_NEGATIVE, D_NEGATION_BOTH
    * @param   outCategory   the specified categories for output filter
    * @param   detailsFlag   a boolean flag for processing details information
    * @param   mutateFlag   a boolean flag for processing mutate information
    *
    * @return  Vector&lt;LexItem> - results from this flow component 
    *
    * @see DbBase
    * @see OutputFilter
    * @see Category
    */
    public static Vector<LexItem> Mutate(LexItem in, Connection conn, 
        RamTrie trie, int restrictFlag, int derivationType, 
        int derivationNegation, long outCategory, boolean detailsFlag, 
        boolean mutateFlag)
    {
        // Mutate
        String infoStr = INFO + " <" + outCategory + ">";
        // ori is sorted already
        Vector<LexItem> ori = ToDerivation.GetDerivations(in, conn, trie, 
            restrictFlag, derivationType, derivationNegation, infoStr, 
            detailsFlag, mutateFlag);
        // restrict output by category 
        Vector<LexItem> out = RestrictOutputByCategory(ori, outCategory);
        return out;
    }
    /**
    * Performs the mutation of this flow component.
    *
    * @param   in   a LexItem as the input for this flow component
    * @param   conn   LVG database connection
    * @param   trie   LVG Ram trie
    * @param   restrictFlag   a numberical flag to restrict out into LVG_ONLY
    * LVG_OR_ALL, or ALL (defined in OutputFilter).
    * @param   outCategory   the specified categories for output filter
    * @param   detailsFlag   a boolean flag for processing details information
    * @param   mutateFlag   a boolean flag for processing mutate information
    *
    * @return  Vector&lt;LexItem> - results from this flow component 
    *
    * @see DbBase
    * @see OutputFilter
    * @see Category
    */
    public static Vector<LexItem> Mutate(LexItem in, Connection conn, 
        RamTrie trie, int restrictFlag, long outCategory,
        boolean detailsFlag, boolean mutateFlag)
    {
        // Mutate
        String infoStr = INFO + " <" + outCategory + ">";
        // ori is sorted already
        Vector<LexItem> ori = ToDerivation.GetDerivations(in, conn, trie, 
            restrictFlag, OutputFilter.D_TYPE_ALL, 
            OutputFilter.D_NEGATION_OTHERWISE, infoStr, detailsFlag, 
            mutateFlag);
        // restrict output by category 
        Vector<LexItem> out = RestrictOutputByCategory(ori, outCategory);
        return out;
    }
    /**
    * A unit test driver for this flow component.
    */
    public static void main(String[] args)
    {
        // load config file
        Configuration conf = new Configuration("data.config.lvg", true);
        String testStr = GetTestStr(args, "help");      // get input String
        int minTermLen = Integer.parseInt(
            conf.GetConfiguration(Configuration.MIN_TERM_LENGTH));
        String lvgDir = conf.GetConfiguration(Configuration.LVG_DIR);
        int minTrieStemLength = Integer.parseInt(
            conf.GetConfiguration(Configuration.DIR_TRIE_STEM_LENGTH));
        // Mutate: connect to DB
        LexItem in = new LexItem(testStr, Category.ALL_BIT_VALUE, 
            Inflection.ALL_BIT_VALUE);
        Vector<LexItem> outs = new Vector<LexItem>();
        try
        {
            Connection conn = DbBase.OpenConnection(conf);
            boolean isInflection = false;
            RamTrie trie = new RamTrie(isInflection, minTermLen, lvgDir,
                minTrieStemLength);
            if(conn != null)
            {
                outs = ToDerivationByCategory.Mutate(in, conn, trie, 
                    OutputFilter.LVG_ONLY, 128, true, true);
            }
            DbBase.CloseConnection(conn, conf);
        }
        catch (Exception e)
        {
            System.err.println(e.getMessage());
        }
        PrintResults(in, outs);     // print out results
    }
    // private method
    // filter out reuslt by specified categories
    private static Vector<LexItem> RestrictOutputByCategory(Vector<LexItem> in,
        long category)
    {
        Vector<LexItem> out = new Vector<LexItem>();
        for(int i = 0; i < in.size(); i++)
        {
            LexItem temp = in.elementAt(i);
            // filter out items by category
            if(OutputFilter.IsRecContainCategory(temp, category) == true)
            {
                out.addElement(temp);
            }
        }
        return out;
    }
    // data members
    private static final String INFO = "DerivationByCategory";
}
